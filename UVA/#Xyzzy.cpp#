#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <list>
#include <queue>
#include <stack>
#include <memory>
#include <iomanip>
#include <numeric>
#include <functional>
#include <new>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cctype>
#include <ctime>

#define REP(i, n) for(int (i) = 0; i < n; i++)
#define FOR(i, a, n) for(int (i) = a; i < n; i++)
#define FORR(i, a, n) for(int (i) = a; i <= n; i++)
#define for_each(q, s) for(typeof(s.begin()) q=s.begin(); q!=s.end(); q++)
#define sz(n) n.size()
#define pb(n) push_back(n)
#define all(n) n.begin(), n.end()

template<typename T> T gcd(T a, T b) {
    if(!b) return a;
    return gcd(b, a % b);
}
template<typename T> T lcm(T a, T b) {
    return a * b / gcd(a, b);
}

using namespace std;

typedef long long ll;
typedef long double ld;

const int MAXN = 107;
int N, prev[MAXN], dist[MAXN];
vector<pair<int, int> > graph[MAXN];

int bellman_ford(int start, int end) {
    REP(i, MAXN) {
        prev[i] = -1;
        dist[i] = INT_MAXN/2;
    }

    dist[start] = 0;
}

int main(void) {
  
    for( ; 1 == scanf("%d", &N) && N != -1; ) {
        FOR(i, 1, N+1) {
            int to_go, cost, next;
            scanf("%d%d", &cost, &to_go);
            REP(j, to_go) {
                scanf("%d", &next);
                graph[i].push_back(make_pair(next, cost));
            }
        }

    }
    return 0;
}
