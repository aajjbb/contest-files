int pointer;
vector<long long> M;
vector<long long> B;

bool bad(int l1,int l2,int l3) {
    return (B[l3]-B[l1])*(M[l1]-M[l2])<(B[l2]-B[l1])*(M[l1]-M[l3]);
}

void add(long long m,long long b) {
    M.push_back(m);
    B.push_back(b);

    while (M.size()>=3&&bad(M.size()-3,M.size()-2,M.size()-1)) {
        M.erase(M.end()-2);
        B.erase(B.end()-2);
    }
}
//Returns the minimum y-coordinate of any intersection between a given vertical
//line and the lower envelope
long long query(long long x)
{
    //If we removed what was the best line for the previous query, then the
    //newly inserted line is now the best for that query
    if (pointer>=M.size())
        pointer=M.size()-1;
    //Any better line must be to the right, since query values are
    //non-decreasing
    while (pointer<M.size()-1&&
           M[pointer+1]*x+B[pointer+1]<M[pointer]*x+B[pointer])
        pointer++;
    return M[pointer]*x+B[pointer];
}
