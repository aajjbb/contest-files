#include <bits/stdc++.h>

template<typename T> T gcd(T a, T b) {
    if(!b) return a;
    return gcd(b, a % b);
}
template<typename T> T lcm(T a, T b) {
    return a * b / gcd(a, b);
}

template<typename T> void chmin(T& a, T b) { a = (a > b) ? b : a; }
template<typename T> void chmax(T& a, T b) { a = (a < b) ? b : a; }
int in() { int x; scanf("%d", &x); return x; }

using namespace std;

typedef long long Int;
typedef unsigned uint;

const int MAXN = 25;
const int MAX_T = 420;
const int INF = 101010010;

int N;
int T[MAXN];

int M[MAXN][MAXN];

int dp[1 << 20];

int func(int id, int t, int mask) {
    if (t == 0 || mask == ((1 << N) - 1)) {
        return 0;
    } else if (t < 0) {
        return -INF;
    }

    int& ans = dp[mask];

    if (ans == -1) {
        int i;

        ans = 0;

        for (i = 0; i < N; i++) if (i != id) {
            if (!(mask & (1 << i))) {
                if (t - T[i] - M[id][i] >= 0) {
                    ans = max(ans, 1 + func(i, t - T[i] - M[id][i], mask | (1 << i)));
                }
            }
        }
    }

    return ans;
}

int main(void) {
    //freopen("i.in", "r", stdin);
    int i;
    int j;
    int k;

    for ( ; scanf("%d", &N) == 1 && N != 0; ) {
        for (i = 0; i < N; i++) {
            T[i] = in();
        }
        for (i = 0; i < N; i++) {
            for (j = 0; j < N; j++) {
                M[i][j] = in();
            }
        }

        for (k = 0; k < N; k++) {
            for (i = 0; i < N; i++) {
                for (j = 0; j < N; j++) {
                    M[i][j] = min(M[i][j], M[i][k] + M[k][j]);
                }
            }
        }

        for (i = 0; i < (1 << N); i++) {
            for (j = 0; j < N; j++) {
                 
            }
        }

        int ans = 0;

        for (i = 0; i < N; i++) {
            if (T[i] <= MAX_T) {
                ans = max(ans, 1 + func(i, MAX_T - T[i], (1 << i)));
            }
        }

        printf("%d\n", ans);
    }

    return 0;
}
